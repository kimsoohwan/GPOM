#if 1
#define BOOST_TEST_MODULE Simple testcases
#include <boost/test/unit_test.hpp>

#include <iostream>
#include <cmath>

#include "GP/DataTypes.hpp"
#include "GP/util/sqDistances.hpp"
#include "GP/Mean/MeanZero.hpp"
#include "GP/Cov/CovSEiso.hpp"
#include "GP/Cov/CovMaterniso.hpp"
#include "GP/Cov/CovSEisoFDI.hpp"
#include "GP/Cov/CovMaternisoFDI.hpp"
#include "GP/Lik/LikGauss.hpp"
#include "GP/Inf/InfExact.hpp"
//#include "InfExactUnstable.hpp"
#include "GP/GP.hpp"

#include "GPOM.hpp"

using namespace GPOM;


// epsilon
//Scalar epsilon = 1E-6f;
Scalar epsilon = 1E5f;

// n, m, d
const int n = 4;
const int m = 7;
const int d = 3;

// X, Xs
Matrix X(n, d);
Matrix Xs(m, d);
MatrixPtr pX, pXs;
VectorPtr pY;

// hyp
CovSEiso::HypPtr pLogHyp;

// covariance
MatrixPtr pK, pKs, pKss;

// covariance matrix objects
CovSEiso						covSEiso;
CovMaterniso3				covMaterniso3;
CovSEisoFDI				covSEisoFDI;
CovMaterniso3FDI		covMaterniso3FDI;

// GP
typedef GaussianProcess<MeanZero, CovSEiso,				LikGauss, InfExact>		GPCovSEiso;
typedef GaussianProcess<MeanZero, CovMaterniso3,		LikGauss, InfExact>		GPCovMaterniso3;
GPCovSEiso				gpCovSEiso;
GPCovMaterniso3	gpCovMaterniso3;

// hyperparameters
GPCovSEiso::MeanHypPtr		pMeanLogHyp;
GPCovSEiso::CovHypPtr		pCovLogHyp;
GPCovSEiso::LikHypPtr			pLikLogHyp;

// nlZ, dnlZ
Scalar nlZ;
VectorPtr pDnlZ;

// GPOM
typedef GaussianProcess<MeanZero, CovMaterniso3FDI, LikGauss, InfExact>		GPOMType;
GPOMType gpom;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOST_AUTO_TEST_SUITE(suite_covariance)

// TEST1: self_squared_distance
BOOST_AUTO_TEST_CASE(self_squared_distance) {

	// X
	X << 	2,     2,     2,
		        8,     9,     6,
				2,     3,     4,
				8,     1 ,    3;
	if(PointMatrixDirection::fRowWisePointsMatrix)
	{
		pX.reset(new Matrix (n, d));
		(*pX) = X;
	}
	else
	{
		X.transposeInPlace();
		pX.reset(new Matrix (d, n));
		(*pX) = X;
	}

	// sqDist = (X - X)^2
	Matrix sqDist_(n, n);
	sqDist_ << 0,   101,      5,    38,
					    101,       0,    76,    73,
					     5,     76,      0,    41,
					     38,     73,    41,      0;

	// square distances
	MatrixPtr pSqDist = selfSqDistances(pX);

	// check
    BOOST_CHECK_EQUAL(sqDist_, (*pSqDist));
}

// TEST2: cross_squared_distance
BOOST_AUTO_TEST_CASE(cross_squared_distance) {
	// Xs
	Xs << 8,     3,     1,
			   5,     5,     5,
			   5,     0,     4,
			   9,     0,     0,
			   2,     5,     3,
			   7,     7,     1,
			   7,     9,     7;

	if(PointMatrixDirection::fRowWisePointsMatrix)
	{
		pXs.reset(new Matrix (m, d));
		(*pXs) = Xs;
	}
	else
	{
		Xs.transposeInPlace();
		pXs.reset(new Matrix (d, m));
		(*pXs) = Xs;
	}


	// sqDists = (X - Xs)^2
	Matrix sqDist_(n, m);
	sqDist_ <<   38,    27,    17,    57,    10,    51,    99,
					      61,    26,    94,   118,    61,    30,     2,
						  45,    14,    18,    74,     5,    50,    70,
						  8,    29,    11,    11,    52,    41,    81;

	// square distances
	MatrixPtr pSqDist = crossSqDistances(pX, pXs);

	// check
    BOOST_CHECK_EQUAL(sqDist_, (*pSqDist));
}


// TEST3: covSEiso: K
BOOST_AUTO_TEST_CASE(covSEiso_K) {
	// K
	Matrix K_(n, n);
	K_ << 6.250000000000000,   0.000000001117845,   2.057456173799411,   0.001344325362889,
			   0.000000001117845,   6.250000000000000,   0.000000289153709,   0.000000563194522,
			   2.057456173799411,   0.000000289153709,   6.250000000000000,   0.000690199654857,
			   0.001344325362889,   0.000000563194522,   0.000690199654857,   6.250000000000000;

	// hyp
	pLogHyp.reset(new CovSEiso::Hyp());
	(*pLogHyp)(0) = log(1.5f);
	(*pLogHyp)(1) = log(2.5f);

	// covSEiso
	pK = covSEiso.K(pX, pLogHyp);
	//pK->triangularView<Eigen::StrictlyLower>() = pK->transpose().eval().triangularView<Eigen::StrictlyLower>();

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST4: covSEiso: partial derivatives of K with respect to log ell
BOOST_AUTO_TEST_CASE(covSEiso_K1) {
	// K
	Matrix K_(n, n);
	K_ <<                   0,   0.000000050178827,   4.572124830665357,   0.022704161684350,
				   0.000000050178827,                   0,   0.000009766969727,   0.000018272533385,
				   4.572124830665357,   0.000009766969727,                   0,   0.012576971488505,
				   0.022704161684350,   0.000018272533385,   0.012576971488505,                   0;

	// covSEiso
	pK = covSEiso.K(pX, pLogHyp, 0);
	//pK->triangularView<Eigen::StrictlyLower>() = pK->transpose().eval().triangularView<Eigen::StrictlyLower>();

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST5: covSEiso: partial derivatives of K with respect to log sigma_f
BOOST_AUTO_TEST_CASE(covSEiso_K2) {
	// K
	Matrix K_(n, n);
	K_ <<  12.500000000000000,   0.000000002235690,   4.114912347598822,   0.002688650725778,
				 0.000000002235690,  12.500000000000000,   0.000000578307418,   0.000001126389044,
				 4.114912347598822,   0.000000578307418,  12.500000000000000,   0.001380399309714,
				 0.002688650725778,   0.000001126389044,   0.001380399309714,  12.500000000000000;

	// covSEiso
	pK = covSEiso.K(pX, pLogHyp, 1);
	//pK->triangularView<Eigen::StrictlyLower>() = pK->transpose().eval().triangularView<Eigen::StrictlyLower>();

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST6: covSEiso: Ks
BOOST_AUTO_TEST_CASE(covSEiso_Ks) {
	// Ks
	Matrix Ks_(n, m);
	Ks_ << 0.001344325362889,   0.015492201104165,   0.142959155695243,   0.000019715898782,   0.677300145136849,   0.000074795572225,   0.000000001743418,
				  0.000008105448308,   0.019347417827283,   0.000000005296035,   0.000000000025569,   0.000008105448308,   0.007953961258374,   4.007377427687215,
				  0.000283749561016,   0.278446414028060,   0.114472743054588,   0.000000450970919,   2.057456173799409,   0.000093408365780,   0.000001096953142,
				  1.056333221287912,   0.009933295521603,   0.542339559212058,   0.542339559212058,   0.000059891612253,   0.000690199654857,   0.000000095187373;

	// covSEiso
	pKs = covSEiso.Ks(pX, pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((Ks_ - (*pKs)).array().abs() < epsilon).all(), true);
}


// TEST7: covSEiso: Kss
BOOST_AUTO_TEST_CASE(covSEiso_Kss) {
	// Ks
	Matrix Kss_(m, 1);
	Kss_ << 6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000;

	// covSEiso
	pKss = covSEiso.Kss(pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((Kss_ - (*pKss)).array().abs() < epsilon).all(), true);
}

// TEST8: CovMaterniso3: K
BOOST_AUTO_TEST_CASE(covMaterniso3_K) {
	// K
	Matrix K_(n, n);
	K_ <<
   6.250000000000000,   0.000718781058796,   1.693014673677355,   0.041115074044017,
   0.000718781058796,   6.250000000000000,   0.002938233259377,   0.003526084701227,
   1.693014673677355,   0.002938233259377,   6.250000000000000,   0.032269615509369,
   0.041115074044017,   0.003526084701227,   0.032269615509369,   6.250000000000000;

	// covMaterniso3
	pK = covMaterniso3.K(pX, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST9: covMaterniso3: partial derivatives of K with respect to log ell
BOOST_AUTO_TEST_CASE(covMaterniso3_K1) {
	// K
	Matrix K_(n, n);
	K_ <<
                   0,   0.007679408620615,   3.150976961193057,   0.256608815569039,
   0.007679408620615,                   0,   0.026904841229566,   0.031585954113480,
   3.150976961193057,   0.026904841229566,                   0,   0.210166458786028,
   0.256608815569039,   0.031585954113480,   0.210166458786028,                   0;

	// covMaterniso3
	pK = covMaterniso3.K(pX, pLogHyp, 0);

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST10: covMaterniso3: partial derivatives of K with respect to log sigma_f
BOOST_AUTO_TEST_CASE(covMaterniso3_K2) {
	// K
	Matrix K_(n, n);
	K_ <<
  12.500000000000000,   0.001437562117592,   3.386029347354711,   0.082230148088033,
   0.001437562117592,  12.500000000000000,   0.005876466518754,   0.007052169402453,
   3.386029347354711,   0.005876466518754,  12.500000000000000,   0.064539231018739,
   0.082230148088033,   0.007052169402453,   0.064539231018739,  12.500000000000000,

	// covMaterniso3
	pK = covMaterniso3.K(pX, pLogHyp, 1);

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}


// TEST11: covMaterniso3: Ks
BOOST_AUTO_TEST_CASE(covMaterniso3_Ks) {
	// Ks
	Matrix Ks_(n, m);
	Ks_ <<
   0.041115074044017,   0.108445407729153,   0.308119361567033,   0.009939312900957,   0.754487924615610,   0.015155134185115,   0.000799370879559,
   0.007585743053829,   0.119373088616289,   0.001047226386691,   0.000302089229212,   0.007585743053829,   0.082024162486835,   3.214621384099057,
   0.023640531963645,   0.442043839782440,   0.274825575237353,   0.003316874388471,   1.693014673677356,   0.016293383157891,   0.004246110669769,
   1.017418517656050,   0.089899911429187,   0.655510558942211,   0.655510558942210,   0.014105293314179,   0.032269615509369,   0.002183589344730;

	// covMaterniso3
	pKs = covMaterniso3.Ks(pX, pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((Ks_ - (*pKs)).array().abs() < epsilon).all(), true);
}


// TEST12: covMaterniso3: Kss
BOOST_AUTO_TEST_CASE(covMaterniso3_Kss) {
	// Ks
	Matrix Kss_(m, 1);
	Kss_ << 6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000,
				   6.250000000000000;

	// covMaterniso3
	pKss = covMaterniso3.Kss(pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((Kss_ - (*pKss)).array().abs() < epsilon).all(), true);
}
BOOST_AUTO_TEST_SUITE_END()


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOST_AUTO_TEST_SUITE(suite_gp)

// TEST1: CovSEiso predict
BOOST_AUTO_TEST_CASE(covSEiso_predict) {
	// mu
	Vector Mu(7);
	Mu <<    1.166388129663797,
				   0.154564253186609,
				   0.653392529498473,
				   0.598769534186285,
				   0.973426313158394,
				   0.005824671062165,
				   2.528313977728111;

	// variance
	Matrix Variance(7, 1);
	Variance <<      6.073999815134176,
							   6.236708155251939,
							   6.199571963620151,
							   6.203606907346916,
							   5.582298224304473,
							   6.249989944355704,
							   3.717023052375709;

	// hyperparameters
	pMeanLogHyp.reset(new GPCovSEiso::MeanHyp());
	pCovLogHyp.reset(new GPCovSEiso::CovHyp());
	pLikLogHyp.reset(new GPCovSEiso::LikHyp());	
	(*pCovLogHyp)(0) = log(1.5f);
	(*pCovLogHyp)(1) = log(2.5f);
	(*pLikLogHyp)(0)	= log(0.3f);

	// Y
	if(PointMatrixDirection::fRowWisePointsMatrix)	pY.reset(new Vector(pX->rows()));
	else																				pY.reset(new Vector(pX->cols()));
	(*pY) << 1, 4, 3, 7;

	// predict 
	VectorPtr pMu;
	MatrixPtr pVariance;
	gpCovSEiso.predict(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
										pX, pY, pXs, 
										pMu, pVariance);


	// check
    BOOST_CHECK_EQUAL(((Mu - (*pMu)).array().abs() < epsilon).all(), true);
    BOOST_CHECK_EQUAL(((Variance - (*pVariance)).array().abs() < epsilon).all(), true);
}

// TEST2: CovMaterniso3 predict
BOOST_AUTO_TEST_CASE(covMaterniso3_predict) {
	// mu
	Vector Mu(7);
	Mu <<    
   1.137202789120280,
   0.380512134332986,
   0.857454698800947,
   0.723859070225765,
   0.819818684285977,
   0.095131637329176,
   2.029867734890605;


	// variance
	Matrix Variance(7, 1);
	Variance <<
   6.086518434128104,
   6.215712362847178,
   6.161506203378075,
   6.182219400070902,
   5.782362681655123,
   6.248714952570278,
   4.620063330443635;

	// hyperparameters
	pMeanLogHyp.reset(new GPCovMaterniso3::MeanHyp());
	pCovLogHyp.reset(new GPCovMaterniso3::CovHyp());
	pLikLogHyp.reset(new GPCovMaterniso3::LikHyp());	
	(*pCovLogHyp)(0) = log(1.5f);
	(*pCovLogHyp)(1) = log(2.5f);
	(*pLikLogHyp)(0)	= log(0.3f);

	// Y
	if(PointMatrixDirection::fRowWisePointsMatrix)	pY.reset(new Vector(pX->rows()));
	else																				pY.reset(new Vector(pX->cols()));
	(*pY) << 1, 4, 3, 7;

	// predict 
	VectorPtr pMu;
	MatrixPtr pVariance;
	gpCovMaterniso3.predict(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
												 pX, pY, pXs, 
												 pMu, pVariance);


	// check
    BOOST_CHECK_EQUAL(((Mu - (*pMu)).array().abs() < epsilon).all(), true);
    BOOST_CHECK_EQUAL(((Variance - (*pVariance)).array().abs() < epsilon).all(), true);
}

// TEST3: nlZ, dnlZ
BOOST_AUTO_TEST_CASE(covSEiso_nlZ_dnlZ) {
	// mu
	Scalar nlZ_ =  13.149528003766861;

	// variance
	Vector dnlZ(3);
	dnlZ <<  -0.277834368243279,
				   -7.565890184811604,
				   -0.105424058454826;

	// nlZ, dnlZ
	gpCovSEiso.negativeLogMarginalLikelihood(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
																				   pX, pY,
																				   nlZ, 
																				   pDnlZ);

	//std::cout << "nlZ_ = " << std::endl << nlZ_ << std::endl << std::endl;
	//std::cout << "nlZ = " << std::endl << nlZ << std::endl << std::endl;
	//std::cout << "dnlZ_ = " << std::endl << dnlZ << std::endl << std::endl;
	//std::cout << "dnlZ = " << std::endl << *pDnlZ << std::endl << std::endl;

	// check
	BOOST_CHECK_EQUAL(std::abs(nlZ_ - nlZ) < epsilon, true);
    BOOST_CHECK_EQUAL(((dnlZ - (*pDnlZ)).array().abs() < epsilon).all(), true);
}

// TEST4: nlZ, dnlZ
BOOST_AUTO_TEST_CASE(covMaterniso3_nlZ_dnlZ) {
	// mu
	Scalar nlZ_ =   13.150661157847448;

	// variance
	Vector dnlZ(3);
	dnlZ <<  -0.327512260108195,
				  -7.531317952672277,
				  -0.105014705653317;

	// nlZ, dnlZ
	gpCovMaterniso3.negativeLogMarginalLikelihood(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
																							pX, pY,
																							nlZ, 
																							pDnlZ);

	// check
	BOOST_CHECK_EQUAL(std::abs(nlZ_ - nlZ) < epsilon, true);
    BOOST_CHECK_EQUAL(((dnlZ - (*pDnlZ)).array().abs() < epsilon).all(), true);
}

// TEST5: covSEiso train hyperparameters
BOOST_AUTO_TEST_CASE(covSEiso_train) {
	// initial hyperparameters
	(*pCovLogHyp)(0) = log(1.5f);
	(*pCovLogHyp)(1) = log(2.5f);
	(*pLikLogHyp)(0)	= log(0.3f);

	// trained hyperparameters
	GPCovSEiso::CovHyp			covLogHyp;	covLogHyp << 2.052422630033926, 1.440277497666226;
	GPCovSEiso::LikHyp			likLogHyp;		likLogHyp << 0.341039567937783;

	// nlZ
	Scalar nlZ_ = 10.478356782033270;

	// train
	gpCovSEiso.train<BFGS, DeltaFunc>(pX, pY, pMeanLogHyp, pCovLogHyp, pLikLogHyp);
	gpCovSEiso.negativeLogMarginalLikelihood(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
																				   pX, pY,
																				   nlZ, 
																				   pDnlZ);

	// check
	std::cout << "covHyp = " << std::endl << covLogHyp.array().exp() << std::endl << std::endl;
	std::cout << "pCovHyp = " << std::endl << pCovLogHyp->array().exp() << std::endl << std::endl;
	std::cout << "likHyp = " << std::endl << likLogHyp.array().exp() << std::endl << std::endl;
	std::cout << "pLikHyp = " << std::endl << pLikLogHyp->array().exp() << std::endl << std::endl;
	std::cout << "nlZ_ = " << std::endl << nlZ_ << std::endl << std::endl;
	std::cout << "nlZ = " << std::endl << nlZ << std::endl << std::endl;
    BOOST_CHECK_EQUAL(((covLogHyp - (*pCovLogHyp)).array().abs() < epsilon).all(), true);
    BOOST_CHECK_EQUAL(((likLogHyp - (*pLikLogHyp)).array().abs() < epsilon).all(), true);
	BOOST_CHECK_EQUAL(std::abs(nlZ_ - nlZ) < epsilon, true);
}

// TEST6: covMaterniso3 train hyperparameters
BOOST_AUTO_TEST_CASE(covMaterniso3_train) {
	// initial hyperparameters
	(*pCovLogHyp)(0) = log(1.5f);
	(*pCovLogHyp)(1) = log(2.5f);
	(*pLikLogHyp)(0)	= log(0.3f);

	// trained hyperparameters
	GPCovSEiso::CovHyp			covLogHyp;	covLogHyp << 2.312806781816551, 1.454245754217935;
	GPCovSEiso::LikHyp			likLogHyp;		likLogHyp << 0.225717246667746;

	// nlZ
	Scalar nlZ_ = 10.449405846170231;

	// train
	gpCovMaterniso3.train<BFGS, DeltaFunc>(pX, pY, pMeanLogHyp, pCovLogHyp, pLikLogHyp);
	gpCovMaterniso3.negativeLogMarginalLikelihood(pMeanLogHyp, pCovLogHyp, pLikLogHyp, 
																					        pX, pY,
																							nlZ, 
																							pDnlZ);

	// check
	std::cout << "covHyp = " << std::endl << covLogHyp.array().exp() << std::endl << std::endl;
	std::cout << "pCovHyp = " << std::endl << pCovLogHyp->array().exp() << std::endl << std::endl;
	std::cout << "likHyp = " << std::endl << likLogHyp.array().exp() << std::endl << std::endl;
	std::cout << "pLikHyp = " << std::endl << pLikLogHyp->array().exp() << std::endl << std::endl;
	std::cout << "nlZ_ = " << std::endl << nlZ_ << std::endl << std::endl;
	std::cout << "nlZ = " << std::endl << nlZ << std::endl << std::endl;
    BOOST_CHECK_EQUAL(((covLogHyp - (*pCovLogHyp)).array().abs() < epsilon).all(), true);
    BOOST_CHECK_EQUAL(((likLogHyp - (*pLikLogHyp)).array().abs() < epsilon).all(), true);
	BOOST_CHECK_EQUAL(std::abs(nlZ_ - nlZ) < epsilon, true);
}

BOOST_AUTO_TEST_SUITE_END()


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOST_AUTO_TEST_SUITE(suite_CovFDI)

// TEST1: CovSEisoFDI
BOOST_AUTO_TEST_CASE(CovSEisoFDI) {

	// K
	Matrix K(n*(d+1), n*(d+1));

	// K_FDI
	K << 
6.250000000000000, 0.000000001117845, 2.057456173799411, 0.001344325362889, 0.000000000000000, -0.000000002980920, 0.000000000000000, -0.003584867634371, 0.000000000000000, -0.000000003477740, -0.914424966133072, 0.000597477939062, 0.000000000000000, -0.000000001987280, -1.828849932266143, -0.000597477939062, 
0.000000001117845, 6.250000000000000, 0.000000289153709, 0.000000563194522, 0.000000002980920, 0.000000000000000, 0.000000771076557, 0.000000000000000, 0.000000003477740, 0.000000000000000, 0.000000771076557, 0.000002002469412, 0.000000001987280, 0.000000000000000, 0.000000257025519, 0.000000750926030, 
2.057456173799411, 0.000000289153709, 6.250000000000000, 0.000690199654857, 0.000000000000000, -0.000000771076557, 0.000000000000000, -0.001840532412952, 0.914424966133072, -0.000000771076557, 0.000000000000000, 0.000613510804317, 1.828849932266143, -0.000000257025519, 0.000000000000000, 0.000306755402159, 
0.001344325362889, 0.000000563194522, 0.000690199654857, 6.250000000000000, 0.003584867634371, 0.000000000000000, 0.001840532412952, 0.000000000000000, -0.000597477939062, -0.000002002469412, -0.000613510804317, 0.000000000000000, 0.000597477939062, -0.000000750926030, -0.000306755402159, 0.000000000000000, 
0.000000000000000, 0.000000002980920, 0.000000000000000, 0.003584867634371, 2.777777777777778, -0.000000007452301, 0.914424966133072, -0.008962169085928, 0.000000000000000, -0.000000009273975, 0.000000000000000, 0.001593274504165, 0.000000000000000, -0.000000005299414, 0.000000000000000, -0.001593274504165, 
-0.000000002980920, 0.000000000000000, -0.000000771076557, 0.000000000000000, -0.000000007452301, 2.777777777777778, -0.000001927691393, 0.000000250308677, -0.000000009273975, 0.000000000000000, -0.000002056204153, 0.000000000000000, -0.000000005299414, 0.000000000000000, -0.000000685401384, 0.000000000000000, 
0.000000000000000, 0.000000771076557, 0.000000000000000, 0.001840532412952, 0.914424966133072, -0.000001927691393, 2.777777777777778, -0.004601331032380, 0.000000000000000, -0.000002056204153, 0.000000000000000, 0.001636028811513, 0.000000000000000, -0.000000685401384, 0.000000000000000, 0.000818014405756, 
-0.003584867634371, 0.000000000000000, -0.001840532412952, 0.000000000000000, -0.008962169085928, 0.000000250308677, -0.004601331032380, 2.777777777777778, 0.001593274504165, 0.000000000000000, 0.001636028811513, 0.000000000000000, -0.001593274504165, 0.000000000000000, 0.000818014405756, 0.000000000000000, 
0.000000000000000, 0.000000003477740, 0.914424966133072, -0.000597477939062, 0.000000000000000, -0.000000009273975, 0.000000000000000, 0.001593274504165, 2.777777777777778, -0.000000010322817, 0.508013870073929, 0.000331932188368, 0.000000000000000, -0.000000006182650, -0.812822192118286, 0.000265545750694, 
-0.000000003477740, 0.000000000000000, -0.000000771076557, -0.000002002469412, -0.000000009273975, 0.000000000000000, -0.000002056204153, 0.000000000000000, -0.000000010322817, 2.777777777777778, -0.000001927691393, -0.000006869582566, -0.000000006182650, 0.000000000000000, -0.000000685401384, -0.000002669959216, 
-0.914424966133072, 0.000000771076557, 0.000000000000000, -0.000613510804317, 0.000000000000000, -0.000002056204153, 0.000000000000000, 0.001636028811513, 0.508013870073929, -0.000001927691393, 2.777777777777778, -0.000238587535012, -0.812822192118286, -0.000000685401384, 0.000000000000000, -0.000272671468585, 
0.000597477939062, 0.000002002469412, 0.000613510804317, 0.000000000000000, 0.001593274504165, 0.000000000000000, 0.001636028811513, 0.000000000000000, 0.000331932188368, -0.000006869582566, -0.000238587535012, 2.777777777777778, 0.000265545750694, -0.000002669959216, -0.000272671468585, 0.000000000000000, 
0.000000000000000, 0.000000001987280, 1.828849932266143, 0.000597477939062, 0.000000000000000, -0.000000005299414, 0.000000000000000, -0.001593274504165, 0.000000000000000, -0.000000006182650, -0.812822192118286, 0.000265545750694, 2.777777777777778, -0.000000003036123, -0.711219418103500, 0.000331932188368, 
-0.000000001987280, 0.000000000000000, -0.000000257025519, -0.000000750926030, -0.000000005299414, 0.000000000000000, -0.000000685401384, 0.000000000000000, -0.000000006182650, 0.000000000000000, -0.000000685401384, -0.000002669959216, -0.000000003036123, 2.777777777777778, -0.000000099954369, -0.000000750926030, 
-1.828849932266143, 0.000000257025519, 0.000000000000000, -0.000306755402159, 0.000000000000000, -0.000000685401384, 0.000000000000000, 0.000818014405756, -0.812822192118286, -0.000000685401384, 0.000000000000000, -0.000272671468585, -0.711219418103500, -0.000000099954369, 2.777777777777778, 0.000170419667866, 
-0.000597477939062, 0.000000750926030, 0.000306755402159, 0.000000000000000, -0.001593274504165, 0.000000000000000, 0.000818014405756, 0.000000000000000, 0.000265545750694, -0.000002669959216, -0.000272671468585, 0.000000000000000, 0.000331932188368, -0.000000750926030, 0.000170419667866, 2.777777777777778;

	// CovSEisoFDI
	pK = covSEisoFDI.K(pX, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// K_FDI_log(ell)
	K << 
0.000000000000000, 0.000000050178827, 4.572124830665357, 0.022704161684350, -0.000000000000000, -0.000000127848363, 0.000000000000000, -0.053374695889525, -0.000000000000000, -0.000000149156424, -0.203205548029571, 0.008895782648254, -0.000000000000000, -0.000000085232242, -0.406411096059142, -0.008895782648254, 
0.000000050178827, 0.000000000000000, 0.000009766969727, 0.000018272533385, 0.000000127848363, -0.000000000000000, 0.000024503099489, 0.000000000000000, 0.000000149156424, -0.000000000000000, 0.000024503099489, 0.000060964068766, 0.000000085232242, -0.000000000000000, 0.000008167699830, 0.000022861525787, 
4.572124830665357, 0.000009766969727, 0.000000000000000, 0.012576971488505, 0.000000000000000, -0.000024503099489, -0.000000000000000, -0.029857525810110, 0.203205548029571, -0.000024503099489, -0.000000000000000, 0.009952508603370, 0.406411096059142, -0.000008167699830, -0.000000000000000, 0.004976254301685, 
0.022704161684350, 0.000018272533385, 0.012576971488505, 0.000000000000000, 0.053374695889525, 0.000000000000000, 0.029857525810110, -0.000000000000000, -0.008895782648254, -0.000060964068766, -0.009952508603370, -0.000000000000000, 0.008895782648254, -0.000022861525787, -0.004976254301685, -0.000000000000000, 
-0.000000000000000, 0.000000127848363, 0.000000000000000, 0.053374695889525, -5.555555555555555, -0.000000303722667, 0.203205548029571, -0.114317445673834, 0.000000000000000, -0.000000379202515, 0.000000000000000, 0.020535538053681, 0.000000000000000, -0.000000216687151, 0.000000000000000, -0.020535538053681, 
-0.000000127848363, -0.000000000000000, -0.000024503099489, 0.000000000000000, -0.000000303722667, -5.555555555555555, -0.000057145340418, 0.000007620508596, -0.000000379202515, 0.000000000000000, -0.000061229190332, 0.000000000000000, -0.000000216687151, 0.000000000000000, -0.000020409730111, 0.000000000000000, 
0.000000000000000, 0.000024503099489, -0.000000000000000, 0.029857525810110, 0.203205548029571, -0.000057145340418, -5.555555555555555, -0.064827641656198, 0.000000000000000, -0.000061229190332, 0.000000000000000, 0.023267965319294, 0.000000000000000, -0.000020409730111, 0.000000000000000, 0.011633982659647, 
-0.053374695889525, 0.000000000000000, -0.029857525810110, -0.000000000000000, -0.114317445673834, 0.000007620508596, -0.064827641656198, -5.555555555555555, 0.020535538053681, 0.000000000000000, 0.023267965319294, 0.000000000000000, -0.020535538053681, 0.000000000000000, 0.011633982659647, 0.000000000000000, 
-0.000000000000000, 0.000000149156424, 0.203205548029571, -0.008895782648254, 0.000000000000000, -0.000000379202515, 0.000000000000000, 0.020535538053681, -5.555555555555555, -0.000000421094874, 0.925714163245825, 0.005473192972641, 0.000000000000000, -0.000000252801677, 1.445017230432508, 0.003422589675614, 
-0.000000149156424, -0.000000000000000, -0.000024503099489, -0.000060964068766, -0.000000379202515, 0.000000000000000, -0.000061229190332, 0.000000000000000, -0.000000421094874, -5.555555555555555, -0.000057145340418, -0.000194900842310, -0.000000252801677, 0.000000000000000, -0.000020409730111, -0.000075945506590, 
-0.203205548029571, 0.000024503099489, -0.000000000000000, -0.009952508603370, 0.000000000000000, -0.000061229190332, 0.000000000000000, 0.023267965319294, 0.925714163245825, -0.000057145340418, -5.555555555555555, -0.002779734138080, 1.445017230432508, -0.000020409730111, 0.000000000000000, -0.003877994219882, 
0.008895782648254, 0.000060964068766, 0.009952508603370, -0.000000000000000, 0.020535538053681, 0.000000000000000, 0.023267965319294, 0.000000000000000, 0.005473192972641, -0.000194900842310, -0.002779734138080, -5.555555555555555, 0.003422589675614, -0.000075945506590, -0.003877994219882, 0.000000000000000, 
-0.000000000000000, 0.000000085232242, 0.406411096059142, 0.008895782648254, 0.000000000000000, -0.000000216687151, 0.000000000000000, -0.020535538053681, 0.000000000000000, -0.000000252801677, 1.445017230432508, 0.003422589675614, -5.555555555555555, -0.000000123150040, 3.093240008894588, 0.005473192972641, 
-0.000000085232242, -0.000000000000000, -0.000008167699830, -0.000022861525787, -0.000000216687151, 0.000000000000000, -0.000020409730111, 0.000000000000000, -0.000000252801677, 0.000000000000000, -0.000020409730111, -0.000075945506590, -0.000000123150040, -5.555555555555555, -0.000002719393455, -0.000020859056375, 
-0.406411096059142, 0.000008167699830, -0.000000000000000, -0.004976254301685, 0.000000000000000, -0.000020409730111, 0.000000000000000, 0.011633982659647, 1.445017230432508, -0.000020409730111, 0.000000000000000, -0.003877994219882, 3.093240008894588, -0.000002719393455, -5.555555555555555, 0.003037257191744, 
-0.008895782648254, 0.000022861525787, 0.004976254301685, -0.000000000000000, -0.020535538053681, 0.000000000000000, 0.011633982659647, 0.000000000000000, 0.003422589675614, -0.000075945506590, -0.003877994219882, 0.000000000000000, 0.005473192972641, -0.000020859056375, 0.003037257191744, -5.555555555555555;

	// partial CovSEisoFDI w.r.t log(ell)
	pK = covSEisoFDI.K(pX, pLogHyp, 0);

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// K_FDI_log(sigma_f)
	K << 
12.500000000000000, 0.000000002235690, 4.114912347598822, 0.002688650725778, 0.000000000000000, -0.000000005961841, 0.000000000000000, -0.007169735268742, 0.000000000000000, -0.000000006955481, -1.828849932266143, 0.001194955878124, 0.000000000000000, -0.000000003974561, -3.657699864532286, -0.001194955878124, 
0.000000002235690, 12.500000000000000, 0.000000578307418, 0.000001126389044, 0.000000005961841, 0.000000000000000, 0.000001542153115, 0.000000000000000, 0.000000006955481, 0.000000000000000, 0.000001542153115, 0.000004004938824, 0.000000003974561, 0.000000000000000, 0.000000514051038, 0.000001501852059, 
4.114912347598822, 0.000000578307418, 12.500000000000000, 0.001380399309714, 0.000000000000000, -0.000001542153115, 0.000000000000000, -0.003681064825904, 1.828849932266143, -0.000001542153115, 0.000000000000000, 0.001227021608635, 3.657699864532286, -0.000000514051038, 0.000000000000000, 0.000613510804317, 
0.002688650725778, 0.000001126389044, 0.001380399309714, 12.500000000000000, 0.007169735268742, 0.000000000000000, 0.003681064825904, 0.000000000000000, -0.001194955878124, -0.000004004938824, -0.001227021608635, 0.000000000000000, 0.001194955878124, -0.000001501852059, -0.000613510804317, 0.000000000000000, 
0.000000000000000, 0.000000005961841, 0.000000000000000, 0.007169735268742, 5.555555555555555, -0.000000014904602, 1.828849932266143, -0.017924338171856, 0.000000000000000, -0.000000018547949, 0.000000000000000, 0.003186549008330, 0.000000000000000, -0.000000010598828, 0.000000000000000, -0.003186549008330, 
-0.000000005961841, 0.000000000000000, -0.000001542153115, 0.000000000000000, -0.000000014904602, 5.555555555555555, -0.000003855382787, 0.000000500617353, -0.000000018547949, 0.000000000000000, -0.000004112408306, 0.000000000000000, -0.000000010598828, 0.000000000000000, -0.000001370802769, 0.000000000000000, 
0.000000000000000, 0.000001542153115, 0.000000000000000, 0.003681064825904, 1.828849932266143, -0.000003855382787, 5.555555555555555, -0.009202662064760, 0.000000000000000, -0.000004112408306, 0.000000000000000, 0.003272057623026, 0.000000000000000, -0.000001370802769, 0.000000000000000, 0.001636028811513, 
-0.007169735268742, 0.000000000000000, -0.003681064825904, 0.000000000000000, -0.017924338171856, 0.000000500617353, -0.009202662064760, 5.555555555555555, 0.003186549008330, 0.000000000000000, 0.003272057623026, 0.000000000000000, -0.003186549008330, 0.000000000000000, 0.001636028811513, 0.000000000000000, 
0.000000000000000, 0.000000006955481, 1.828849932266143, -0.001194955878124, 0.000000000000000, -0.000000018547949, 0.000000000000000, 0.003186549008330, 5.555555555555555, -0.000000020645634, 1.016027740147857, 0.000663864376735, 0.000000000000000, -0.000000012365299, -1.625644384236572, 0.000531091501388, 
-0.000000006955481, 0.000000000000000, -0.000001542153115, -0.000004004938824, -0.000000018547949, 0.000000000000000, -0.000004112408306, 0.000000000000000, -0.000000020645634, 5.555555555555555, -0.000003855382787, -0.000013739165133, -0.000000012365299, 0.000000000000000, -0.000001370802769, -0.000005339918432, 
-1.828849932266143, 0.000001542153115, 0.000000000000000, -0.001227021608635, 0.000000000000000, -0.000004112408306, 0.000000000000000, 0.003272057623026, 1.016027740147857, -0.000003855382787, 5.555555555555555, -0.000477175070025, -1.625644384236572, -0.000001370802769, 0.000000000000000, -0.000545342937171, 
0.001194955878124, 0.000004004938824, 0.001227021608635, 0.000000000000000, 0.003186549008330, 0.000000000000000, 0.003272057623026, 0.000000000000000, 0.000663864376735, -0.000013739165133, -0.000477175070025, 5.555555555555555, 0.000531091501388, -0.000005339918432, -0.000545342937171, 0.000000000000000, 
0.000000000000000, 0.000000003974561, 3.657699864532286, 0.001194955878124, 0.000000000000000, -0.000000010598828, 0.000000000000000, -0.003186549008330, 0.000000000000000, -0.000000012365299, -1.625644384236572, 0.000531091501388, 5.555555555555555, -0.000000006072245, -1.422438836207000, 0.000663864376735, 
-0.000000003974561, 0.000000000000000, -0.000000514051038, -0.000001501852059, -0.000000010598828, 0.000000000000000, -0.000001370802769, 0.000000000000000, -0.000000012365299, 0.000000000000000, -0.000001370802769, -0.000005339918432, -0.000000006072245, 5.555555555555555, -0.000000199908737, -0.000001501852059, 
-3.657699864532286, 0.000000514051038, 0.000000000000000, -0.000613510804317, 0.000000000000000, -0.000001370802769, 0.000000000000000, 0.001636028811513, -1.625644384236572, -0.000001370802769, 0.000000000000000, -0.000545342937171, -1.422438836207000, -0.000000199908737, 5.555555555555555, 0.000340839335732, 
-0.001194955878124, 0.000001501852059, 0.000613510804317, 0.000000000000000, -0.003186549008330, 0.000000000000000, 0.001636028811513, 0.000000000000000, 0.000531091501388, -0.000005339918432, -0.000545342937171, 0.000000000000000, 0.000663864376735, -0.000001501852059, 0.000340839335732, 5.555555555555555;

	// partial CovSEisoFDI w.r.t log(sigma_f)
	pK = covSEisoFDI.K(pX, pLogHyp, 1);

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// Ks_FDI
	Matrix K_(n*(d+1), m);
	K_ << 
0.001344325362889, 0.015492201104165, 0.142959155695243, 0.000019715898782, 0.677300145136849, 0.000074795572225, 0.000000001743418, 
0.000008105448308, 0.019347417827283, 0.000000005296035, 0.000000000025569, 0.000008105448308, 0.007953961258374, 4.007377427687215, 
0.000283749561016, 0.278446414028060, 0.114472743054588, 0.000000450970919, 2.057456173799409, 0.000093408365780, 0.000001096953142, 
1.056333221287912, 0.009933295521603, 0.542339559212058, 0.542339559212058, 0.000059891612253, 0.000690199654857, 0.000000095187373, 
0.003584867634371, 0.020656268138886, 0.190612207593657, 0.000061338351767, 0.000000000000000, 0.000166212382723, 0.000000003874261, 
0.000000000000000, -0.025796557103044, -0.000000007061380, 0.000000000011364, -0.000021614528821, -0.003535093892611, -1.781056634527650, 
0.000756665496041, 0.371261885370747, 0.152630324072785, 0.000001403020637, 0.000000000000000, 0.000207574146178, 0.000002437673650, 
0.000000000000000, -0.013244394028804, -0.723119412282744, 0.241039804094248, -0.000159710966009, -0.000306755402159, -0.000000042305499, 
0.000597477939062, 0.020656268138886, -0.127074805062438, -0.000017525243362, 0.903066860182465, 0.000166212382723, 0.000000005423966, 
-0.000021614528821, -0.034395409470725, -0.000000021184140, -0.000000000102276, -0.000014409685881, -0.007070187785221, 0.000000000000000, 
0.000000000000000, 0.247507923580498, -0.152630324072785, -0.000000601294559, 1.828849932266142, 0.000166059316942, 0.000002925208380, 
0.938962863367033, 0.017659192038406, -0.241039804094248, -0.241039804094248, 0.000106473977339, 0.001840532412952, 0.000000338443994, 
-0.000597477939062, 0.020656268138886, 0.127074805062438, -0.000017525243362, 0.301022286727488, -0.000033242476545, 0.000000003874261, 
-0.000018012107351, -0.008598852367681, -0.000000004707587, -0.000000000068184, -0.000010807264410, -0.017675469463053, 1.781056634527652, 
-0.000378332748021, 0.123753961790249, 0.000000000000000, -0.000000801726078, -0.914424966133071, -0.000124544487707, 0.000001462604190, 
-0.938962863367033, 0.008829596019203, 0.241039804094248, -0.723119412282744, 0.000000000000000, -0.000613510804317, 0.000000169221997;

	// partial CovSEisoFDI w.r.t log(ell)
	pK = covSEisoFDI.Ks(pX, pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}

// TEST2: CovMaterniso3FDI
BOOST_AUTO_TEST_CASE(CovMaterniso3FDI) {

	// K
	Matrix K(n*(d+1), n*(d+1));

	// K_FDI
	K << 
6.250000000000000, 0.000718781058796, 1.693014673677355, 0.041115074044017, 0.000000000000000, -0.000456202492314, 0.000000000000000, -0.040517181405638, 0.000000000000000, -0.000532236241033, -0.630195392238612, 0.006752863567606, 0.000000000000000, -0.000304134994876, -1.260390784477223, -0.006752863567606, 
0.000718781058796, 6.250000000000000, 0.002938233259377, 0.003526084701227, 0.000456202492314, 0.000000000000000, 0.002124066412860, 0.000000000000000, 0.000532236241033, 0.000000000000000, 0.002124066412860, 0.003461474423395, 0.000304134994876, 0.000000000000000, 0.000708022137620, 0.001298052908773, 
1.693014673677355, 0.002938233259377, 6.250000000000000, 0.032269615509369, 0.000000000000000, -0.002124066412860, 0.000000000000000, -0.030756067139419, 0.630195392238612, -0.002124066412860, 0.000000000000000, 0.010252022379806, 1.260390784477223, -0.000708022137620, 0.000000000000000, 0.005126011189903, 
0.041115074044017, 0.003526084701227, 0.032269615509369, 6.250000000000000, 0.040517181405638, 0.000000000000000, 0.030756067139419, 0.000000000000000, -0.006752863567606, -0.003461474423395, -0.010252022379806, 0.000000000000000, 0.006752863567606, -0.001298052908773, -0.005126011189903, 0.000000000000000, 
0.000000000000000, 0.000456202492314, 0.000000000000000, 0.040517181405638, 8.333333333333330, -0.000238464032156, 0.630195392238612, -0.038784517108156, 0.000000000000000, -0.000366914077687, 0.000000000000000, 0.007589563445960, 0.000000000000000, -0.000209665187250, 0.000000000000000, -0.007589563445960, 
-0.000456202492314, 0.000000000000000, -0.002124066412860, 0.000000000000000, -0.000238464032156, 8.333333333333330, -0.001334025746623, 0.000432684302924, -0.000366914077687, 0.000000000000000, -0.001688036815433, 0.000000000000000, -0.000209665187250, 0.000000000000000, -0.000562678938478, 0.000000000000000, 
0.000000000000000, 0.002124066412860, 0.000000000000000, 0.030756067139419, 0.630195392238612, -0.001334025746623, 8.333333333333330, -0.028152162995785, 0.000000000000000, -0.001688036815433, 0.000000000000000, 0.011092724728563, 0.000000000000000, -0.000562678938478, 0.000000000000000, 0.005546362364281, 
-0.040517181405638, 0.000000000000000, -0.030756067139419, 0.000000000000000, -0.038784517108156, 0.000432684302924, -0.028152162995785, 8.333333333333330, 0.007589563445960, 0.000000000000000, 0.011092724728563, 0.000000000000000, -0.007589563445960, 0.000000000000000, 0.005546362364281, 0.000000000000000, 
0.000000000000000, 0.000532236241033, 0.630195392238612, -0.006752863567606, 0.000000000000000, -0.000366914077687, 0.000000000000000, 0.007589563445960, 8.333333333333330, -0.000352032675249, 0.304763891039039, 0.005487936326613, 0.000000000000000, -0.000244609385125, -0.650863002399145, 0.001264927240993, 
-0.000532236241033, 0.000000000000000, -0.002124066412860, -0.003461474423395, -0.000366914077687, 0.000000000000000, -0.001688036815433, 0.000000000000000, -0.000352032675249, 8.333333333333330, -0.001334025746623, -0.003309791940695, -0.000244609385125, 0.000000000000000, -0.000562678938478, -0.001403428591357, 
-0.630195392238612, 0.002124066412860, 0.000000000000000, -0.010252022379806, 0.000000000000000, -0.001688036815433, 0.000000000000000, 0.011092724728563, 0.304763891039039, -0.001334025746623, 8.333333333333330, 0.001428436280382, -0.650863002399145, -0.000562678938478, 0.000000000000000, -0.001848787454760, 
0.006752863567606, 0.003461474423395, 0.010252022379806, 0.000000000000000, 0.007589563445960, 0.000000000000000, 0.011092724728563, 0.000000000000000, 0.005487936326613, -0.003309791940695, 0.001428436280382, 8.333333333333330, 0.001264927240993, -0.001403428591357, -0.001848787454760, 0.000000000000000, 
0.000000000000000, 0.000304134994876, 1.260390784477223, 0.006752863567606, 0.000000000000000, -0.000209665187250, 0.000000000000000, -0.007589563445960, 0.000000000000000, -0.000244609385125, -0.650863002399145, 0.001264927240993, 8.333333333333330, -0.000063743042781, -0.671530612559679, 0.005487936326613, 
-0.000304134994876, 0.000000000000000, -0.000708022137620, -0.001298052908773, -0.000209665187250, 0.000000000000000, -0.000562678938478, 0.000000000000000, -0.000244609385125, 0.000000000000000, -0.000562678938478, -0.001403428591357, -0.000063743042781, 8.333333333333330, 0.000166451422651, -0.000093601418835, 
-1.260390784477223, 0.000708022137620, 0.000000000000000, -0.005126011189903, 0.000000000000000, -0.000562678938478, 0.000000000000000, 0.005546362364281, -0.650863002399145, -0.000562678938478, 0.000000000000000, -0.001848787454760, -0.671530612559679, 0.000166451422651, 8.333333333333330, 0.004201617462523, 
-0.006752863567606, 0.001298052908773, 0.005126011189903, 0.000000000000000, -0.007589563445960, 0.000000000000000, 0.005546362364281, 0.000000000000000, 0.001264927240993, -0.001403428591357, -0.001848787454760, 0.000000000000000, 0.005487936326613, -0.000093601418835, 0.004201617462523, 8.333333333333330;

	// CovMaterniso3FDI
	pK = covMaterniso3FDI.K(pX, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// K_FDI_log(ell)
	K << 
0.000000000000000, 0.007679408620615, 3.150976961193057, 0.256608815569039, -0.000000000000000, -0.004381640993428, 0.000000000000000, -0.207369048135220, -0.000000000000000, -0.005111914492333, -0.366766721520639, 0.034561508022537, -0.000000000000000, -0.002921093995619, -0.733533443041278, -0.034561508022537, 
0.007679408620615, 0.000000000000000, 0.026904841229566, 0.031585954113480, 0.004381640993428, -0.000000000000000, 0.017133666836434, 0.000000000000000, 0.005111914492333, -0.000000000000000, 0.017133666836434, 0.027227146876233, 0.002921093995619, -0.000000000000000, 0.005711222278811, 0.010210180078587, 
3.150976961193057, 0.026904841229566, 0.000000000000000, 0.210166458786028, 0.000000000000000, -0.017133666836434, -0.000000000000000, -0.165888722656698, 0.366766721520639, -0.017133666836434, -0.000000000000000, 0.055296240885566, 0.733533443041278, -0.005711222278811, -0.000000000000000, 0.027648120442783, 
0.256608815569039, 0.031585954113480, 0.210166458786028, 0.000000000000000, 0.207369048135220, 0.000000000000000, 0.165888722656698, -0.000000000000000, -0.034561508022537, -0.027227146876233, -0.055296240885566, -0.000000000000000, 0.034561508022537, -0.010210180078587, -0.027648120442783, -0.000000000000000, 
-0.000000000000000, 0.004381640993428, 0.000000000000000, 0.207369048135220, -16.666666666666668, -0.001975853096982, 0.366766721520639, -0.152963801195279, -0.000000000000000, -0.003157147695201, 0.000000000000000, 0.031254218202969, -0.000000000000000, -0.001804084397258, 0.000000000000000, -0.031254218202969, 
-0.004381640993428, -0.000000000000000, -0.017133666836434, 0.000000000000000, -0.001975853096982, -16.666666666666668, -0.009072809717178, 0.003403393359529, -0.003157147695201, -0.000000000000000, -0.011928420856584, 0.000000000000000, -0.001804084397258, -0.000000000000000, -0.003976140285528, 0.000000000000000, 
0.000000000000000, 0.017133666836434, -0.000000000000000, 0.165888722656698, 0.366766721520639, -0.009072809717178, -16.666666666666668, -0.118565894115503, 0.000000000000000, -0.011928420856584, -0.000000000000000, 0.048738004852762, 0.000000000000000, -0.003976140285528, -0.000000000000000, 0.024369002426381, 
-0.207369048135220, 0.000000000000000, -0.165888722656698, -0.000000000000000, -0.152963801195279, 0.003403393359529, -0.118565894115503, -16.666666666666668, 0.031254218202969, 0.000000000000000, 0.048738004852762, -0.000000000000000, -0.031254218202969, 0.000000000000000, 0.024369002426381, -0.000000000000000, 
-0.000000000000000, 0.005111914492333, 0.366766721520639, -0.034561508022537, -0.000000000000000, -0.003157147695201, 0.000000000000000, 0.031254218202969, -16.666666666666668, -0.002953065478830, 0.502800702134541, 0.029352471655375, -0.000000000000000, -0.002104765130134, 0.272067961227805, 0.005209036367162, 
-0.005111914492333, -0.000000000000000, -0.017133666836434, -0.027227146876233, -0.003157147695201, -0.000000000000000, -0.011928420856584, 0.000000000000000, -0.002953065478830, -16.666666666666668, -0.009072809717178, -0.022291571759161, -0.002104765130134, -0.000000000000000, -0.003976140285528, -0.009635611919509, 
-0.366766721520639, 0.017133666836434, -0.000000000000000, -0.055296240885566, 0.000000000000000, -0.011928420856584, -0.000000000000000, 0.048738004852762, 0.502800702134541, -0.009072809717178, -16.666666666666668, 0.011402118825196, 0.272067961227805, -0.003976140285528, -0.000000000000000, -0.008123000808794, 
0.034561508022537, 0.027227146876233, 0.055296240885566, -0.000000000000000, 0.031254218202969, 0.000000000000000, 0.048738004852762, -0.000000000000000, 0.029352471655375, -0.022291571759161, 0.011402118825196, -16.666666666666668, 0.005209036367162, -0.009635611919509, -0.008123000808794, -0.000000000000000, 
-0.000000000000000, 0.002921093995619, 0.733533443041278, 0.034561508022537, -0.000000000000000, -0.001804084397258, 0.000000000000000, -0.031254218202969, -0.000000000000000, -0.002104765130134, 0.272067961227805, 0.005209036367162, -16.666666666666668, -0.000472449432600, 0.910902643976248, 0.029352471655375, 
-0.002921093995619, -0.000000000000000, -0.005711222278811, -0.010210180078587, -0.001804084397258, -0.000000000000000, -0.003976140285528, 0.000000000000000, -0.002104765130134, -0.000000000000000, -0.003976140285528, -0.009635611919509, -0.000472449432600, -16.666666666666668, 0.001530231044230, -0.000209961110287, 
-0.733533443041278, 0.005711222278811, -0.000000000000000, -0.027648120442783, 0.000000000000000, -0.003976140285528, -0.000000000000000, 0.024369002426381, 0.272067961227805, -0.003976140285528, -0.000000000000000, -0.008123000808794, 0.910902643976248, 0.001530231044230, -16.666666666666668, 0.023586620038386, 
-0.034561508022537, 0.010210180078587, 0.027648120442783, -0.000000000000000, -0.031254218202969, 0.000000000000000, 0.024369002426381, -0.000000000000000, 0.005209036367162, -0.009635611919509, -0.008123000808794, -0.000000000000000, 0.029352471655375, -0.000209961110287, 0.023586620038386, -16.666666666666668;

	// partial CovMaterniso3FDI w.r.t log(ell)
	pK = covMaterniso3FDI.K(pX, pLogHyp, 0);
	//std::cout << "error < eps " << std::endl << ((K - (*pK)).array().abs() < epsilon).matrix() << std::endl << std::endl;

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// K_FDI_log(sigma_f)
	K << 
12.500000000000000, 0.001437562117592, 3.386029347354711, 0.082230148088033, 0.000000000000000, -0.000912404984628, 0.000000000000000, -0.081034362811276, 0.000000000000000, -0.001064472482065, -1.260390784477223, 0.013505727135213, 0.000000000000000, -0.000608269989752, -2.520781568954447, -0.013505727135213, 
0.001437562117592, 12.500000000000000, 0.005876466518754, 0.007052169402453, 0.000912404984628, 0.000000000000000, 0.004248132825721, 0.000000000000000, 0.001064472482065, 0.000000000000000, 0.004248132825721, 0.006922948846790, 0.000608269989752, 0.000000000000000, 0.001416044275240, 0.002596105817546, 
3.386029347354711, 0.005876466518754, 12.500000000000000, 0.064539231018739, 0.000000000000000, -0.004248132825721, 0.000000000000000, -0.061512134278838, 1.260390784477223, -0.004248132825721, 0.000000000000000, 0.020504044759613, 2.520781568954447, -0.001416044275240, 0.000000000000000, 0.010252022379806, 
0.082230148088033, 0.007052169402453, 0.064539231018739, 12.500000000000000, 0.081034362811276, 0.000000000000000, 0.061512134278838, 0.000000000000000, -0.013505727135213, -0.006922948846790, -0.020504044759613, 0.000000000000000, 0.013505727135213, -0.002596105817546, -0.010252022379806, 0.000000000000000, 
0.000000000000000, 0.000912404984628, 0.000000000000000, 0.081034362811276, 16.666666666666668, -0.000476928064311, 1.260390784477223, -0.077569034216312, 0.000000000000000, -0.000733828155374, 0.000000000000000, 0.015179126891921, 0.000000000000000, -0.000419330374499, 0.000000000000000, -0.015179126891921, 
-0.000912404984628, 0.000000000000000, -0.004248132825721, 0.000000000000000, -0.000476928064311, 16.666666666666668, -0.002668051493246, 0.000865368605849, -0.000733828155374, 0.000000000000000, -0.003376073630867, 0.000000000000000, -0.000419330374499, 0.000000000000000, -0.001125357876956, 0.000000000000000, 
0.000000000000000, 0.004248132825721, 0.000000000000000, 0.061512134278838, 1.260390784477223, -0.002668051493246, 16.666666666666668, -0.056304325991570, 0.000000000000000, -0.003376073630867, 0.000000000000000, 0.022185449457125, 0.000000000000000, -0.001125357876956, 0.000000000000000, 0.011092724728563, 
-0.081034362811276, 0.000000000000000, -0.061512134278838, 0.000000000000000, -0.077569034216312, 0.000865368605849, -0.056304325991570, 16.666666666666668, 0.015179126891921, 0.000000000000000, 0.022185449457125, 0.000000000000000, -0.015179126891921, 0.000000000000000, 0.011092724728563, 0.000000000000000, 
0.000000000000000, 0.001064472482065, 1.260390784477223, -0.013505727135213, 0.000000000000000, -0.000733828155374, 0.000000000000000, 0.015179126891921, 16.666666666666668, -0.000704065350498, 0.609527782078078, 0.010975872653226, 0.000000000000000, -0.000489218770249, -1.301726004798290, 0.002529854481987, 
-0.001064472482065, 0.000000000000000, -0.004248132825721, -0.006922948846790, -0.000733828155374, 0.000000000000000, -0.003376073630867, 0.000000000000000, -0.000704065350498, 16.666666666666668, -0.002668051493246, -0.006619583881389, -0.000489218770249, 0.000000000000000, -0.001125357876956, -0.002806857182714, 
-1.260390784477223, 0.004248132825721, 0.000000000000000, -0.020504044759613, 0.000000000000000, -0.003376073630867, 0.000000000000000, 0.022185449457125, 0.609527782078078, -0.002668051493246, 16.666666666666668, 0.002856872560764, -1.301726004798290, -0.001125357876956, 0.000000000000000, -0.003697574909521, 
0.013505727135213, 0.006922948846790, 0.020504044759613, 0.000000000000000, 0.015179126891921, 0.000000000000000, 0.022185449457125, 0.000000000000000, 0.010975872653226, -0.006619583881389, 0.002856872560764, 16.666666666666668, 0.002529854481987, -0.002806857182714, -0.003697574909521, 0.000000000000000, 
0.000000000000000, 0.000608269989752, 2.520781568954447, 0.013505727135213, 0.000000000000000, -0.000419330374499, 0.000000000000000, -0.015179126891921, 0.000000000000000, -0.000489218770249, -1.301726004798290, 0.002529854481987, 16.666666666666668, -0.000127486085562, -1.343061225119357, 0.010975872653226, 
-0.000608269989752, 0.000000000000000, -0.001416044275240, -0.002596105817546, -0.000419330374499, 0.000000000000000, -0.001125357876956, 0.000000000000000, -0.000489218770249, 0.000000000000000, -0.001125357876956, -0.002806857182714, -0.000127486085562, 16.666666666666668, 0.000332902845302, -0.000187202837669, 
-2.520781568954447, 0.001416044275240, 0.000000000000000, -0.010252022379806, 0.000000000000000, -0.001125357876956, 0.000000000000000, 0.011092724728563, -1.301726004798290, -0.001125357876956, 0.000000000000000, -0.003697574909521, -1.343061225119357, 0.000332902845302, 16.666666666666668, 0.008403234925046, 
-0.013505727135213, 0.002596105817546, 0.010252022379806, 0.000000000000000, -0.015179126891921, 0.000000000000000, 0.011092724728563, 0.000000000000000, 0.002529854481987, -0.002806857182714, -0.003697574909521, 0.000000000000000, 0.010975872653226, -0.000187202837669, 0.008403234925046, 16.666666666666668;

	// partial CovMaterniso3FDI w.r.t log(sigma_f)
	pK = covMaterniso3FDI.K(pX, pLogHyp, 1);

	// check
    BOOST_CHECK_EQUAL(((K - (*pK)).array().abs() < epsilon).all(), true);

	// Ks_FDI
	Matrix K_(n*(d+1), m);
	K_ << 
0.041115074044017, 0.108445407729153, 0.308119361567033, 0.009939312900957, 0.754487924615610, 0.015155134185115, 0.000799370879559, 
0.007585743053829, 0.119373088616289, 0.001047226386691, 0.000302089229212, 0.007585743053829, 0.082024162486835, 3.214621384099057, 
0.023640531963645, 0.442043839782440, 0.274825575237353, 0.003316874388471, 1.693014673677356, 0.016293383157891, 0.004246110669769, 
1.017418517656050, 0.089899911429187, 0.655510558942211, 0.655510558942210, 0.014105293314179, 0.032269615509369, 0.002183589344730, 
0.040517181405638, 0.061968804416659, 0.213936409320459, 0.009546084564308, 0.000000000000000, 0.010927094910066, 0.000426702356811, 
0.000000000000000, -0.069323955612641, -0.000343487012054, 0.000029740674262, -0.006057388573651, -0.014931356949246, -1.627866683271207, 
0.021624168300708, 0.332332942382623, 0.186354657384245, 0.002831536074951, 0.000000000000000, 0.011851932309009, 0.002655250224644, 
0.000000000000000, -0.049818101493477, -0.542898660077536, 0.180966220025846, -0.012098896940993, -0.005126011189903, -0.000255563075176, 
0.006752863567606, 0.061968804416659, -0.142624272880306, -0.002727452732659, 0.648814847534887, 0.010927094910066, 0.000597383299535, 
-0.006057388573651, -0.092431940816855, -0.001030461036163, -0.000267666068362, -0.004038259049101, -0.029862713898492, 0.000000000000000, 
0.000000000000000, 0.221555294921749, -0.186354657384245, -0.001213515460693, 1.260390784477223, 0.009481545847208, 0.003186300269573, 
0.635987985241057, 0.066424135324636, -0.180966220025845, -0.180966220025845, 0.008065931293995, 0.030756067139419, 0.002044504601411, 
-0.006752863567606, 0.061968804416659, 0.142624272880306, -0.002727452732659, 0.216271615844962, -0.002185418982013, 0.000426702356811, 
-0.005047823811376, -0.023107985204214, -0.000228991341370, -0.000178444045575, -0.003028694286826, -0.074656784746230, 1.627866683271209, 
-0.010812084150354, 0.110777647460875, 0.000000000000000, -0.001618020614257, -0.630195392238611, -0.007111159385406, 0.001593150134787, 
-0.635987985241057, 0.033212067662318, 0.180966220025845, -0.542898660077536, 0.000000000000000, -0.010252022379806, 0.001022252300705;

	// partial CovMaterniso3FDI w.r.t log(ell)
	pK = covMaterniso3FDI.Ks(pX, pXs, pLogHyp);

	// check
    BOOST_CHECK_EQUAL(((K_ - (*pK)).array().abs() < epsilon).all(), true);
}

BOOST_AUTO_TEST_SUITE_END()

#else

#include <iostream>
#include <string>

#include <pcl/io/pcd_io.h>
#include <pcl/features/normal_3d.h>
#include <pcl/surface/mls.h>

#include "GP/Mean/MeanZero.hpp"
#include "GP/Cov/CovMaternisoFDI.hpp"
#include "GP/Lik/LikGauss.hpp"
#include "GP/Inf/InfExact.hpp"
//#include "InfExactUnstable.hpp"

#include "util/surfaceNormals.hpp"
#include "GPOM.hpp"
using namespace GPOM;

typedef GaussianProcessOccupancyMap<MeanZero, CovMaterniso3FDI, LikGauss, InfExact> GPOMType;

int main()
{
	// Point Clouds
	pcl::PointCloud<pcl::PointXYZ>::Ptr pPoints (new pcl::PointCloud<pcl::PointXYZ>);

	// Load data from a PCD file
	std::string filenName("input.pcd");
	//std::string filenName("../../../PCL/PCL-1.5.1-Source/test/bunny.pcd");
	if (pcl::io::loadPCDFile<pcl::PointXYZ>(filenName, *pPoints) == -1)
	{
		PCL_ERROR("Couldn't read file!\n");
		return -1;
	}
	else
	{
		std::cout << pPoints->size() << " points are successfully loaded." << std::endl;
	}

	// surface normals
	//pcl::PointCloud<pcl::PointNormal>::Ptr pPointNormals;
	//smoothAndNormalEstimation(pPoints, pPointNormals);
	const float searchRadius = 0.03f;
	pcl::PointCloud<pcl::Normal>::Ptr pNormals = estimateSurfaceNormals(pPoints, searchRadius);


	// GPOM
	const float mapResolution = 0.1f; // 10cm
	const float octreeResolution = 0.02f; //10.f; 
	GPOMType gpom;
	gpom.build(pPoints, pNormals, mapResolution);
	//gpom.build(pPoints, pNormals, mapResolution, octreeResolution);
}
#endif
